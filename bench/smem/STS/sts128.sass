<params>
scal, 8
output, 8
</params>

<regs>
0-18 ~ output0, output1, tid, offset, target, start, end, iter, tmp, aux
</regs>

--:-:1:-:5    S2R tid, SR_TID.X;
--:-:-:-:2    MOV output0, output[0];
--:-:-:-:5    MOV output1, output[1];

02:-:-:-:6    SHF.R aux, tid, 4, RZ;
02:-:-:-:6    SHF.L aux, aux, 4, RZ;
04:-:1:-:6    IMAD aux, aux, -1, tid; 

--:-:-:-:1    ISETP.GT.AND P0, PT, aux, 8, PT;
02:-:-:-:6    SHF.L offset, tid, 4, RZ;
--:-:-:-:2    MOV tmp, scal;
--:-:-:-:5    MOV iter, RZ;

--:-:-:-:2    @P0  EXIT;

--:-:-:-:1    CS2R start, SR_CLOCKLO;

LOOP:
<code>
out = []
out.append('--:-:-:-:1    IADD3 iter, iter, 1, RZ;')
for i in range(128):
  if i == 64:
    out.append(f'--:-:-:-:1    ISETP.LT.AND P0, PT, iter, 128, PT;')
  out.append(f'--:-:-:-:1    STS.128 [offset], tmp;')
out.append('--:-:-:-:2  @P0  BRA LOOP;')  
out_ = '\n'.join(out) + '\n'
</code>

--:-:-:-:5    CS2R end, SR_CLOCKLO;
--:-:-:-:5    IADD3 end, end, -start, RZ;
--:-:-:-:2    STG.E.GPU [output0], end;

#02:-:-:-:6    SHF.L aux, tid, 2, RZ;
#--:-:-:-:5    IADD3 output0, output0, aux, RZ;
#--:-:-:-:2    STG.E.GPU [output0], iter;



--:-:-:-:2    EXIT;
